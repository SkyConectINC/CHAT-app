version: "3.9"

services:
  db:
    image: postgres:latest
    restart: always
    volumes:
      - ./db-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://backend:3001 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - project_root_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - project_root_network

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: always
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./nginx-proxy-manager/data:/data
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    depends_on:
      frontend:
        condition: service_started
    networks:
      - project_root_network

networks:
  project_root_network:
    name: project_root_network